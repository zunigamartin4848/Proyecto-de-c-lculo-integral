import math
import re
from scipy.integrate import quad
from tabulate import tabulate  # Importar tabulate para crear la tabla

# Función para agregar '*' entre números y variables (ejemplo: 2x => 2*x)
def agregar_multiplicacion_implicita(expr):
    expr_con_asteriscos = re.sub(r'(\d)([a-zA-Z])', r'\1*\2', expr)  # Añade * entre número y variable
    return expr_con_asteriscos

def f1(x, func1):
    return func1(x)

def f2(x, func2):
    return func2(x)

# Función para calcular las áreas (inferior, media, superior) entre dos curvas en un subintervalo
def areas_entre_curvas(func1, func2, a, b):
    # Calcular los puntos de evaluación: extremo izquierdo, punto medio, extremo derecho
    puntomedio = (a + b) / 2
    altura_inferior = f1(a, func1) - f2(a, func2)  # Usando el extremo izquierdo
    altura_media = f1(puntomedio, func1) - f2(puntomedio, func2)  # Usando el punto medio
    altura_superior = f1(b, func1) - f2(b, func2)  # Usando el extremo derecho

    # Calcular el área como altura * base (diferencia en x) para cada caso
    base = b - a
    area_inferior = altura_inferior * base
    area_media = altura_media * base
    area_superior = altura_superior * base

    return area_inferior, area_media, area_superior

# Función para calcular el área entre dos curvas mediante integración
def area_integral(func1, func2, a, b):
    # Definir una función lambda para la diferencia entre las dos curvas
    integrand = lambda x: func1(x) - func2(x)

    # Usar quad para calcular la integral definida
    area, _ = quad(integrand, a, b)

    return area

# Datos de las funciones y subintervalos
subintervalos = [
    (51.0, 67.6, "7.23x-362.25", "-0.01x+11.62"),
    (67.6, 84.19999999999999, "-354+111.2math.log(x)", "-0.01x+11.62"),
    (84.2, 100.80000000000001, "-354+111.2math.log(x)", "-0.01x+11.62"),
    (100.80000000000001, 117.4, "-354+111.2math.log(x)", "-0.01x+11.62"),
    (117.4, 134.0, "-354+111.2math.log(x)", "0.3x-26.1"),
    (134.0, 150.6, "-354+111.2math.log(x)", "0.3x-26.1"),
    (150.60000000000002, 167.20000000000002, "-354+111.2math.log(x)", "0.3x-26.1"),
    (167.20000000000002, 183.8, "-598+159math.log(x)", "0.3x-26.1"),
    (183.8, 200.4, "-598+159math.log(x)", "0.3x-26.1"),
    (200.4, 217.0, "-598+159math.log(x)", "0.3x-26.1"),
    (217.0, 233.6, "-598+159math.log(x)", "0.3x-26.1"),
    (233.60000000000002, 250.20000000000002, "-0.03x**2+14.64x-1524", "-1700+321math.log(x)"),
    (250.20000000000002, 266.8, "-0.03x**2+14.64x-1524", "-1700+321math.log(x)"),
    (266.8, 283.40000000000003, "-0.03x**2+14.64x-1524", "-1700+321math.log(x)"),
    (283.40000000000003, 300.00000000000006, "-0.03x**2+14.64x-1524", "-1700+321math.log(x)")
]

# Variables para almacenar las sumas totales de las áreas
suma_inferior_total = 0
suma_media_total = 0
suma_superior_total = 0
suma_integral_total = 0  # Nueva suma total usando integración

# Lista para almacenar los resultados de cada subintervalo
resultados = []

# Recorrer los subintervalos y calcular el área para cada uno
for i, (a, b, funcion1_str, funcion2_str) in enumerate(subintervalos):
    # Agregar '*' implícito entre números y variables
    funcion1_str = agregar_multiplicacion_implicita(funcion1_str)
    funcion2_str = agregar_multiplicacion_implicita(funcion2_str)

    # Convertir las cadenas de entrada en funciones lambda, incluyendo el módulo math
    funcion1 = eval(f"lambda x: {funcion1_str}", {"math": math})
    funcion2 = eval(f"lambda x: {funcion2_str}", {"math": math})

    # Calcular las áreas inferior, media y superior en el subintervalo actual
    area_inferior, area_media, area_superior = areas_entre_curvas(funcion1, funcion2, a, b)
    # Calcular el área mediante el teorema fundamental del cálculo (integración)
    area_integral_actual = area_integral(funcion1, funcion2, a, b)

    # Almacenar los resultados en la lista para la tabla
    resultados.append([i + 1, a, b, area_inferior, area_media, area_superior, area_integral_actual])

    # Sumar las áreas actuales a las sumas totales
    suma_inferior_total += area_inferior
    suma_media_total += area_media
    suma_superior_total += area_superior
    suma_integral_total += area_integral_actual

# Mostrar la tabla con los resultados de cada subintervalo
print(tabulate(resultados, headers=["Subintervalo", "a", "b", "Área Inferior", "Área Media", "Área Superior", "Área Integral"], floatfmt=".6f"))

# Imprimir la suma total de las áreas
print(f"\nSuma total de áreas inferior: {suma_inferior_total:.6f}")
print(f"Suma total de áreas media: {suma_media_total:.6f}")
print(f"Suma total de áreas superior: {suma_superior_total:.6f}")
print(f"Suma total de áreas por integración: {suma_integral_total:.6f}")
